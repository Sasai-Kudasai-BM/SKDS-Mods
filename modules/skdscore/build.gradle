apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version = "1.0"
group = "net.skds"

dependencies {
    project(":skdslib")
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation 'org.spongepowered:mixin:0.8.4'
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

base {
    archivesName = mod_id
}
minecraft {

    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }

        client {
            workingDirectory rootProject.file('run-' + project.name + "-client")
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            workingDirectory rootProject.file('run-' + project.name + "-server")
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        //attributes([
        //        "MixinConfigs": "mixins." + mod_id + ".json"
        //])
    }
    finalizedBy 'reobfJar'
}

mixin {
    add sourceSets.main, "mixins." + mod_id + ".refmap.json"
    config "mixins." + mod_id + ".json"
    disableAnnotationProcessorCheck()
}

configurations {
    exposedRuntime {
        canBeResolved = false
        assert canBeConsumed
    }
}
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}